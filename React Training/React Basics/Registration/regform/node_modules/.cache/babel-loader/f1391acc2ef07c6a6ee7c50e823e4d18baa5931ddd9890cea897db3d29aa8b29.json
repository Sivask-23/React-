{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"https://gorest.co.in/public/v2/\";\nconst api_key = '35c707c450cba2d92a0573f66a364f42b92af1cf2e2a1e260034a0b0944ff4c6';\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL\n  // headers:{\n  //     'Content-Type':'Application/json',\n  //     'Authorization':'Bearer 35c707c450cba2d92a0573f66a364f42b92af1cf2e2a1e260034a0b0944ff4c6'}\n});\n\n// Add a request interceptor\naxiosInstance.interceptors.request.use(config => {\n  // You can modify the request here before it's sent\n  console.log('Request Interceptor:', config);\n  config.headers['Content-Type'] = 'application/json';\n  config.headers['Authorization'] = `Bearer ${api_key}`;\n\n  // Example: Modify headers if needed (e.g., add a custom header or refresh token)\n  // config.headers['Custom-Header'] = 'CustomValue';\n  return config;\n}, error => {\n  // Handle request error (optional)\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\n// axiosInstance.interceptors.response.use(\n//     (response) => {\n//       // You can modify the response here before it's returned\n//       console.log('Response Interceptor:', response);\n\n//       // Example: Handle the response data (e.g., filter or manipulate the data)\n//       if (response.status === 200) {\n//         console.log('Successful response:', response.data);\n//       }\n\n//       return response;\n//     },(error) => {\n//         // Handle response error globally\n//         console.error('Response error:', error);\n\n//         // Example: You can handle a specific error type, e.g., 401 Unauthorized\n//         if (error.response && error.response.status === 401) {\n//           console.log('Token expired or unauthorized request');\n//           // Perform token refresh or redirection if needed\n//         }\n\n//         return Promise.reject(error);\n//       }\n//     );\n\nexport const API = axiosInstance;","map":{"version":3,"names":["axios","BASE_URL","api_key","axiosInstance","create","baseURL","interceptors","request","use","config","console","log","headers","error","Promise","reject","API"],"sources":["C:/Users/Siva Kumar/OneDrive/Desktop/React Training/React Basics/Registration/regform/src/services/Api.js"],"sourcesContent":["import axios from \"axios\";\r\nconst BASE_URL=\"https://gorest.co.in/public/v2/\";\r\nconst api_key='35c707c450cba2d92a0573f66a364f42b92af1cf2e2a1e260034a0b0944ff4c6';\r\n\r\n\r\nconst axiosInstance=axios.create({\r\n    baseURL:BASE_URL,\r\n    // headers:{\r\n    //     'Content-Type':'Application/json',\r\n    //     'Authorization':'Bearer 35c707c450cba2d92a0573f66a364f42b92af1cf2e2a1e260034a0b0944ff4c6'}\r\n})\r\n\r\n\r\n\r\n\r\n// Add a request interceptor\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    // You can modify the request here before it's sent\r\n    console.log('Request Interceptor:', config);\r\n    config.headers['Content-Type']='application/json'\r\n    config.headers['Authorization']=`Bearer ${api_key}`\r\n\r\n    // Example: Modify headers if needed (e.g., add a custom header or refresh token)\r\n    // config.headers['Custom-Header'] = 'CustomValue';\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Handle request error (optional)\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Add a response interceptor\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => {\r\n//       // You can modify the response here before it's returned\r\n//       console.log('Response Interceptor:', response);\r\n  \r\n//       // Example: Handle the response data (e.g., filter or manipulate the data)\r\n//       if (response.status === 200) {\r\n//         console.log('Successful response:', response.data);\r\n//       }\r\n  \r\n//       return response;\r\n//     },(error) => {\r\n//         // Handle response error globally\r\n//         console.error('Response error:', error);\r\n    \r\n//         // Example: You can handle a specific error type, e.g., 401 Unauthorized\r\n//         if (error.response && error.response.status === 401) {\r\n//           console.log('Token expired or unauthorized request');\r\n//           // Perform token refresh or redirection if needed\r\n//         }\r\n    \r\n//         return Promise.reject(error);\r\n//       }\r\n//     );\r\n\r\n\r\n\r\n\r\nexport const API=axiosInstance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,QAAQ,GAAC,iCAAiC;AAChD,MAAMC,OAAO,GAAC,kEAAkE;AAGhF,MAAMC,aAAa,GAACH,KAAK,CAACI,MAAM,CAAC;EAC7BC,OAAO,EAACJ;EACR;EACA;EACA;AACJ,CAAC,CAAC;;AAKF;AACAE,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV;EACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,MAAM,CAAC;EAC3CA,MAAM,CAACG,OAAO,CAAC,cAAc,CAAC,GAAC,kBAAkB;EACjDH,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,GAAC,UAAUV,OAAO,EAAE;;EAEnD;EACA;EACA,OAAOO,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT;EACAH,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAOD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAKA,OAAO,MAAMG,GAAG,GAACb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}